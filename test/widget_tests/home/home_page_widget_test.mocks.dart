// Mocks generated by Mockito 5.4.4 from annotations
// in movie_mate/test/widget_tests/home/home_page_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_mate/core/blocs/common_api_state.dart' as _i2;
import 'package:movie_mate/core/error/failures.dart' as _i7;
import 'package:movie_mate/features/home/data/models/movie_model.dart' as _i8;
import 'package:movie_mate/features/home/domain/use_cases/get_upcoming_movies.dart'
    as _i3;
import 'package:movie_mate/features/home/presentation/blocs/movie_search_cubit.dart'
    as _i4;
import 'package:movie_mate/features/home/presentation/blocs/upcoming_movies_cubit.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommonApiState_0 extends _i1.SmartFake
    implements _i2.CommonApiState {
  _FakeCommonApiState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUpcomingMovies_1 extends _i1.SmartFake
    implements _i3.GetUpcomingMovies {
  _FakeGetUpcomingMovies_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieSearchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieSearchCubit extends _i1.Mock implements _i4.MovieSearchCubit {
  MockMovieSearchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CommonApiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCommonApiState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CommonApiState);

  @override
  _i5.Stream<_i2.CommonApiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.CommonApiState>.empty(),
      ) as _i5.Stream<_i2.CommonApiState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> search({required String? query}) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {#query: query},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> performApiCall(
    _i5.Future<_i6.Either<_i7.Failure, List<_i8.MovieModel>>> Function()?
        apiCall, {
    dynamic Function(List<_i8.MovieModel>)? successAction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performApiCall,
          [apiCall],
          {#successAction: successAction},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emit(_i2.CommonApiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i2.CommonApiState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UpcomingMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpcomingMoviesCubit extends _i1.Mock
    implements _i10.UpcomingMoviesCubit {
  MockUpcomingMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetUpcomingMovies get getUpcomingMovies => (super.noSuchMethod(
        Invocation.getter(#getUpcomingMovies),
        returnValue: _FakeGetUpcomingMovies_1(
          this,
          Invocation.getter(#getUpcomingMovies),
        ),
      ) as _i3.GetUpcomingMovies);

  @override
  _i2.CommonApiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCommonApiState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CommonApiState);

  @override
  _i5.Stream<_i2.CommonApiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.CommonApiState>.empty(),
      ) as _i5.Stream<_i2.CommonApiState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchMovies({int? page = 1}) => (super.noSuchMethod(
        Invocation.method(
          #fetchMovies,
          [],
          {#page: page},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadMoreMovies() => (super.noSuchMethod(
        Invocation.method(
          #loadMoreMovies,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> performApiCall(
    _i5.Future<_i6.Either<_i7.Failure, List<_i8.MovieModel>>> Function()?
        apiCall, {
    dynamic Function(List<_i8.MovieModel>)? successAction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performApiCall,
          [apiCall],
          {#successAction: successAction},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emit(_i2.CommonApiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i2.CommonApiState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
