// Mocks generated by Mockito 5.4.4 from annotations
// in movie_mate/test/unit_tests/features/home/data/data_sources/home_local_data_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_mate/core/database/genre_dao.dart' as _i5;
import 'package:movie_mate/core/database/movie_dao.dart' as _i2;
import 'package:movie_mate/features/home/data/models/genre_model.dart' as _i7;
import 'package:movie_mate/features/home/data/models/movie_model.dart' as _i4;
import 'package:movie_mate/features/home/domain/entities/genre.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i2.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertMovies(
    List<_i4.MovieModel>? movies,
    String? type,
    int? pageNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertMovies,
          [
            movies,
            type,
            pageNumber,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.MovieModel>> getMovies(
    String? type,
    int? pageNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [
            type,
            pageNumber,
          ],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);

  @override
  _i3.Future<List<_i4.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]),
      ) as _i3.Future<List<_i4.MovieModel>>);
}

/// A class which mocks [GenreDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreDao extends _i1.Mock implements _i5.GenreDao {
  MockGenreDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertGenres(List<_i6.Genre>? genres) => (super.noSuchMethod(
        Invocation.method(
          #insertGenres,
          [genres],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.GenreModel>> getAllGenres() => (super.noSuchMethod(
        Invocation.method(
          #getAllGenres,
          [],
        ),
        returnValue: _i3.Future<List<_i7.GenreModel>>.value(<_i7.GenreModel>[]),
      ) as _i3.Future<List<_i7.GenreModel>>);
}
