import 'package:bloc_test/bloc_test.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:dartz/dartz.dart';
import 'package:movie_mate/core/blocs/common_api_state.dart';
import 'package:movie_mate/core/error/failures.dart';
import 'package:movie_mate/features/home/data/models/movie_model.dart';
import 'package:movie_mate/features/home/domain/use_cases/search_movies.dart';
import 'package:movie_mate/features/home/presentation/blocs/movie_search_cubit.dart';

import 'movie_search_cubit_test.mocks.dart'; // Generated by Mockito

@GenerateMocks([SearchMovies])
void main() {
  late MovieSearchCubit cubit;
  late MockSearchMovies mockSearchMovies;

  setUp(() {
    mockSearchMovies = MockSearchMovies();
    cubit = MovieSearchCubit(mockSearchMovies);
  });

  test('initial state should be ApiInitial', () {
    // assert
    expect(cubit.state, equals(ApiInitial()));
  });

  group('Search Movies', () {
    final MovieModel tMovieModel = MovieModel(
      id: 1,
      title: 'Test Movie',
      originalTitle: 'Test Movie Original',
      overview: 'Test Overview',
      posterPath: 'test_poster_path',
      backdropPath: 'test_backdrop_path',
      genreIds: [1, 2],
      popularity: 10.0,
      releaseDate: '2024-01-01',
      voteAverage: 8.0,
      voteCount: 100,
      adult: false,
      video: false,
      originalLanguage: 'en',
    );
    final tSearchedMovies = List.filled(10, tMovieModel);

    blocTest<MovieSearchCubit, CommonApiState>(
      'should emit [ApiLoading, ApiSuccess] when data is successfully fetched',
      build: () {
        when(mockSearchMovies(params: anyNamed('params')))
            .thenAnswer((_) async => Right(tSearchedMovies));
        return cubit;
      },
      act: (cubit) => cubit.search(query: 'test query'),
      expect: () => [
        ApiLoading(),
        ApiSuccess(response: tSearchedMovies),
      ],
    );

    blocTest<MovieSearchCubit, CommonApiState>(
      'should emit [ApiLoading, ApiError] when data fetch fails with ServerFailure',
      build: () {
        when(mockSearchMovies(params: anyNamed('params')))
            .thenAnswer((_) async => const Left(ServerFailure(error: 'SERVER_FAILURE')));
        return cubit;
      },
      act: (cubit) => cubit.search(query: 'test query'),
      expect: () => [ApiLoading(), const ApiError(message: 'SERVER_FAILURE')],
    );

    blocTest<MovieSearchCubit, CommonApiState>(
      'should emit [ApiLoading, ApiError] with a proper message for Unknown Exception',
      build: () {
        when(mockSearchMovies(params: anyNamed('params')))
            .thenAnswer((_) async => Left(CacheFailure()));
        return cubit;
      },
      act: (cubit) => cubit.search(query: 'test query'),
      expect: () => [ApiLoading(), const ApiError(message: 'Unknown Exception')],
    );

    test('reset should emit ApiInitial', () {
      // Act
      cubit.reset();

      // Assert
      expect(cubit.state, equals(ApiInitial()));
    });
  });
}
